
midterm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004390  08004390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004398  08004398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080043ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080043ac  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001abe  00000000  00000000  0002a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002bea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bcd8  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085cd  00000000  00000000  000491e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e52f  00000000  00000000  000517b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ffc  00000000  00000000  000efd60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004320 	.word	0x08004320

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004320 	.word	0x08004320

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 feb5 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 fa85 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fbe9 	bl	8000d0c <MX_GPIO_Init>
  MX_RTC_Init();
 800053a:	f000 fae3 	bl	8000b04 <MX_RTC_Init>
  MX_TIM1_Init();
 800053e:	f000 fb45 	bl	8000bcc <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sAlarm.AlarmTime.Hours = 1;
 8000542:	4b9a      	ldr	r3, [pc, #616]	; (80007ac <main+0x284>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 13;
 8000548:	4b98      	ldr	r3, [pc, #608]	; (80007ac <main+0x284>)
 800054a:	220d      	movs	r2, #13
 800054c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 5;
 800054e:	4b97      	ldr	r3, [pc, #604]	; (80007ac <main+0x284>)
 8000550:	2205      	movs	r2, #5
 8000552:	709a      	strb	r2, [r3, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000554:	4b95      	ldr	r3, [pc, #596]	; (80007ac <main+0x284>)
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 ff00 	bl	8001360 <HAL_Delay>
	  RTC_TimeTypeDef tmpTime;
	  RTC_AlarmTypeDef tmpAlarm;
	  HAL_RTC_GetTime(&hrtc, &tmpTime, RTC_FORMAT_BIN);
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	4891      	ldr	r0, [pc, #580]	; (80007b0 <main+0x288>)
 800056a:	f002 faa3 	bl	8002ab4 <HAL_RTC_GetTime>
	  HAL_RTC_GetAlarm(&hrtc, &tmpAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 800056e:	4639      	mov	r1, r7
 8000570:	2300      	movs	r3, #0
 8000572:	2200      	movs	r2, #0
 8000574:	488e      	ldr	r0, [pc, #568]	; (80007b0 <main+0x288>)
 8000576:	f002 fd79 	bl	800306c <HAL_RTC_GetAlarm>

	  if(alarmflag == 0) {
 800057a:	4b8e      	ldr	r3, [pc, #568]	; (80007b4 <main+0x28c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	f040 8120 	bne.w	80007c4 <main+0x29c>
		  uint8_t secFirstDigit = tmpTime.Seconds%10;
 8000584:	7aba      	ldrb	r2, [r7, #10]
 8000586:	4b8c      	ldr	r3, [pc, #560]	; (80007b8 <main+0x290>)
 8000588:	fba3 1302 	umull	r1, r3, r3, r2
 800058c:	08d9      	lsrs	r1, r3, #3
 800058e:	460b      	mov	r3, r1
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	747b      	strb	r3, [r7, #17]
		  uint8_t secSecondDigit = tmpTime.Seconds/10;
 800059a:	7abb      	ldrb	r3, [r7, #10]
 800059c:	4a86      	ldr	r2, [pc, #536]	; (80007b8 <main+0x290>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	743b      	strb	r3, [r7, #16]

	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, secFirstDigit & 0x01);
 80005a6:	7c7b      	ldrb	r3, [r7, #17]
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	2101      	movs	r1, #1
 80005b2:	4882      	ldr	r0, [pc, #520]	; (80007bc <main+0x294>)
 80005b4:	f001 f95e 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, secFirstDigit & 0x02);
 80005b8:	7c7b      	ldrb	r3, [r7, #17]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	2102      	movs	r1, #2
 80005c4:	487d      	ldr	r0, [pc, #500]	; (80007bc <main+0x294>)
 80005c6:	f001 f955 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, secFirstDigit & 0x04);
 80005ca:	7c7b      	ldrb	r3, [r7, #17]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2104      	movs	r1, #4
 80005d6:	4879      	ldr	r0, [pc, #484]	; (80007bc <main+0x294>)
 80005d8:	f001 f94c 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, secFirstDigit & 0x08);
 80005dc:	7c7b      	ldrb	r3, [r7, #17]
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	2108      	movs	r1, #8
 80005e8:	4874      	ldr	r0, [pc, #464]	; (80007bc <main+0x294>)
 80005ea:	f001 f943 	bl	8001874 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, secSecondDigit & 0x01);
 80005ee:	7c3b      	ldrb	r3, [r7, #16]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	2110      	movs	r1, #16
 80005fa:	4870      	ldr	r0, [pc, #448]	; (80007bc <main+0x294>)
 80005fc:	f001 f93a 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, secSecondDigit & 0x02);
 8000600:	7c3b      	ldrb	r3, [r7, #16]
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	2120      	movs	r1, #32
 800060c:	486b      	ldr	r0, [pc, #428]	; (80007bc <main+0x294>)
 800060e:	f001 f931 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, secSecondDigit & 0x04);
 8000612:	7c3b      	ldrb	r3, [r7, #16]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4867      	ldr	r0, [pc, #412]	; (80007bc <main+0x294>)
 8000620:	f001 f928 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, secSecondDigit & 0x08);
 8000624:	7c3b      	ldrb	r3, [r7, #16]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4862      	ldr	r0, [pc, #392]	; (80007bc <main+0x294>)
 8000632:	f001 f91f 	bl	8001874 <HAL_GPIO_WritePin>

	  	  uint8_t minFirstDigit = tmpTime.Minutes%10;
 8000636:	7a7a      	ldrb	r2, [r7, #9]
 8000638:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <main+0x290>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	08d9      	lsrs	r1, r3, #3
 8000640:	460b      	mov	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	73fb      	strb	r3, [r7, #15]
	  	  uint8_t minSecondDigit = tmpTime.Minutes/10;
 800064c:	7a7b      	ldrb	r3, [r7, #9]
 800064e:	4a5a      	ldr	r2, [pc, #360]	; (80007b8 <main+0x290>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	73bb      	strb	r3, [r7, #14]

	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, minFirstDigit & 0x01);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4855      	ldr	r0, [pc, #340]	; (80007bc <main+0x294>)
 8000668:	f001 f904 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, minFirstDigit & 0x02);
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	4850      	ldr	r0, [pc, #320]	; (80007bc <main+0x294>)
 800067c:	f001 f8fa 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, minFirstDigit & 0x04);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	484b      	ldr	r0, [pc, #300]	; (80007bc <main+0x294>)
 8000690:	f001 f8f0 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, minFirstDigit & 0x08);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a2:	4846      	ldr	r0, [pc, #280]	; (80007bc <main+0x294>)
 80006a4:	f001 f8e6 	bl	8001874 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, minSecondDigit & 0x01);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	4841      	ldr	r0, [pc, #260]	; (80007bc <main+0x294>)
 80006b8:	f001 f8dc 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, minSecondDigit & 0x02);
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	483c      	ldr	r0, [pc, #240]	; (80007bc <main+0x294>)
 80006cc:	f001 f8d2 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, minSecondDigit & 0x04);
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	4837      	ldr	r0, [pc, #220]	; (80007bc <main+0x294>)
 80006e0:	f001 f8c8 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, minSecondDigit & 0x08);
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <main+0x294>)
 80006f4:	f001 f8be 	bl	8001874 <HAL_GPIO_WritePin>

	  	  uint8_t hourFirstDigit = tmpTime.Hours%10;
 80006f8:	7a3a      	ldrb	r2, [r7, #8]
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <main+0x290>)
 80006fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000700:	08d9      	lsrs	r1, r3, #3
 8000702:	460b      	mov	r3, r1
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	737b      	strb	r3, [r7, #13]
	  	  uint8_t hourSecondDigit = tmpTime.Hours/10;
 800070e:	7a3b      	ldrb	r3, [r7, #8]
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <main+0x290>)
 8000712:	fba2 2303 	umull	r2, r3, r2, r3
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	733b      	strb	r3, [r7, #12]

	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, hourFirstDigit & 0x01);
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	2101      	movs	r1, #1
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <main+0x298>)
 8000728:	f001 f8a4 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, hourFirstDigit & 0x02);
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	2102      	movs	r1, #2
 8000738:	4821      	ldr	r0, [pc, #132]	; (80007c0 <main+0x298>)
 800073a:	f001 f89b 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, hourFirstDigit & 0x04);
 800073e:	7b7b      	ldrb	r3, [r7, #13]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	2104      	movs	r1, #4
 800074a:	481d      	ldr	r0, [pc, #116]	; (80007c0 <main+0x298>)
 800074c:	f001 f892 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, hourFirstDigit & 0x08);
 8000750:	7b7b      	ldrb	r3, [r7, #13]
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2108      	movs	r1, #8
 800075c:	4818      	ldr	r0, [pc, #96]	; (80007c0 <main+0x298>)
 800075e:	f001 f889 	bl	8001874 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, hourSecondDigit & 0x01);
 8000762:	7b3b      	ldrb	r3, [r7, #12]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	2110      	movs	r1, #16
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <main+0x298>)
 8000770:	f001 f880 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, hourSecondDigit & 0x02);
 8000774:	7b3b      	ldrb	r3, [r7, #12]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	2120      	movs	r1, #32
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <main+0x298>)
 8000782:	f001 f877 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, hourSecondDigit & 0x04);
 8000786:	7b3b      	ldrb	r3, [r7, #12]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <main+0x298>)
 8000794:	f001 f86e 	bl	8001874 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, hourSecondDigit & 0x08);
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <main+0x298>)
 80007a6:	f001 f865 	bl	8001874 <HAL_GPIO_WritePin>
 80007aa:	e123      	b.n	80009f4 <main+0x4cc>
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	20000034 	.word	0x20000034
 80007b4:	20000028 	.word	0x20000028
 80007b8:	cccccccd 	.word	0xcccccccd
 80007bc:	40011400 	.word	0x40011400
 80007c0:	40011000 	.word	0x40011000

	  }
	  else if (alarmflag == 1) {
 80007c4:	4b99      	ldr	r3, [pc, #612]	; (8000a2c <main+0x504>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	f040 8113 	bne.w	80009f4 <main+0x4cc>
		  uint8_t secFirstDigit = tmpAlarm.AlarmTime.Seconds%10;
 80007ce:	78ba      	ldrb	r2, [r7, #2]
 80007d0:	4b97      	ldr	r3, [pc, #604]	; (8000a30 <main+0x508>)
 80007d2:	fba3 1302 	umull	r1, r3, r3, r2
 80007d6:	08d9      	lsrs	r1, r3, #3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	75fb      	strb	r3, [r7, #23]
		  uint8_t secSecondDigit = tmpAlarm.AlarmTime.Seconds/10;
 80007e4:	78bb      	ldrb	r3, [r7, #2]
 80007e6:	4a92      	ldr	r2, [pc, #584]	; (8000a30 <main+0x508>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	75bb      	strb	r3, [r7, #22]

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, secFirstDigit & 0x01);
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	2101      	movs	r1, #1
 80007fc:	488d      	ldr	r0, [pc, #564]	; (8000a34 <main+0x50c>)
 80007fe:	f001 f839 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, secFirstDigit & 0x02);
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	2102      	movs	r1, #2
 800080e:	4889      	ldr	r0, [pc, #548]	; (8000a34 <main+0x50c>)
 8000810:	f001 f830 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, secFirstDigit & 0x04);
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	2104      	movs	r1, #4
 8000820:	4884      	ldr	r0, [pc, #528]	; (8000a34 <main+0x50c>)
 8000822:	f001 f827 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, secFirstDigit & 0x08);
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	b2db      	uxtb	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	2108      	movs	r1, #8
 8000832:	4880      	ldr	r0, [pc, #512]	; (8000a34 <main+0x50c>)
 8000834:	f001 f81e 	bl	8001874 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, secSecondDigit & 0x01);
 8000838:	7dbb      	ldrb	r3, [r7, #22]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	2110      	movs	r1, #16
 8000844:	487b      	ldr	r0, [pc, #492]	; (8000a34 <main+0x50c>)
 8000846:	f001 f815 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, secSecondDigit & 0x02);
 800084a:	7dbb      	ldrb	r3, [r7, #22]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	2120      	movs	r1, #32
 8000856:	4877      	ldr	r0, [pc, #476]	; (8000a34 <main+0x50c>)
 8000858:	f001 f80c 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, secSecondDigit & 0x04);
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	4872      	ldr	r0, [pc, #456]	; (8000a34 <main+0x50c>)
 800086a:	f001 f803 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, secSecondDigit & 0x08);
 800086e:	7dbb      	ldrb	r3, [r7, #22]
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	486e      	ldr	r0, [pc, #440]	; (8000a34 <main+0x50c>)
 800087c:	f000 fffa 	bl	8001874 <HAL_GPIO_WritePin>

		  uint8_t minFirstDigit = tmpAlarm.AlarmTime.Minutes%10;
 8000880:	787a      	ldrb	r2, [r7, #1]
 8000882:	4b6b      	ldr	r3, [pc, #428]	; (8000a30 <main+0x508>)
 8000884:	fba3 1302 	umull	r1, r3, r3, r2
 8000888:	08d9      	lsrs	r1, r3, #3
 800088a:	460b      	mov	r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	757b      	strb	r3, [r7, #21]
		  uint8_t minSecondDigit = tmpAlarm.AlarmTime.Minutes/10;
 8000896:	787b      	ldrb	r3, [r7, #1]
 8000898:	4a65      	ldr	r2, [pc, #404]	; (8000a30 <main+0x508>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	753b      	strb	r3, [r7, #20]

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, minFirstDigit & 0x01);
 80008a2:	7d7b      	ldrb	r3, [r7, #21]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4860      	ldr	r0, [pc, #384]	; (8000a34 <main+0x50c>)
 80008b2:	f000 ffdf 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, minFirstDigit & 0x02);
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	485b      	ldr	r0, [pc, #364]	; (8000a34 <main+0x50c>)
 80008c6:	f000 ffd5 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, minFirstDigit & 0x04);
 80008ca:	7d7b      	ldrb	r3, [r7, #21]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	4856      	ldr	r0, [pc, #344]	; (8000a34 <main+0x50c>)
 80008da:	f000 ffcb 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, minFirstDigit & 0x08);
 80008de:	7d7b      	ldrb	r3, [r7, #21]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ec:	4851      	ldr	r0, [pc, #324]	; (8000a34 <main+0x50c>)
 80008ee:	f000 ffc1 	bl	8001874 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, minSecondDigit & 0x01);
 80008f2:	7d3b      	ldrb	r3, [r7, #20]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000900:	484c      	ldr	r0, [pc, #304]	; (8000a34 <main+0x50c>)
 8000902:	f000 ffb7 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, minSecondDigit & 0x02);
 8000906:	7d3b      	ldrb	r3, [r7, #20]
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	4847      	ldr	r0, [pc, #284]	; (8000a34 <main+0x50c>)
 8000916:	f000 ffad 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, minSecondDigit & 0x04);
 800091a:	7d3b      	ldrb	r3, [r7, #20]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4842      	ldr	r0, [pc, #264]	; (8000a34 <main+0x50c>)
 800092a:	f000 ffa3 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, minSecondDigit & 0x08);
 800092e:	7d3b      	ldrb	r3, [r7, #20]
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093c:	483d      	ldr	r0, [pc, #244]	; (8000a34 <main+0x50c>)
 800093e:	f000 ff99 	bl	8001874 <HAL_GPIO_WritePin>

		  uint8_t hourFirstDigit = tmpAlarm.AlarmTime.Hours%10;
 8000942:	783a      	ldrb	r2, [r7, #0]
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <main+0x508>)
 8000946:	fba3 1302 	umull	r1, r3, r3, r2
 800094a:	08d9      	lsrs	r1, r3, #3
 800094c:	460b      	mov	r3, r1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	74fb      	strb	r3, [r7, #19]
		  uint8_t hourSecondDigit = tmpAlarm.AlarmTime.Hours/10;
 8000958:	783b      	ldrb	r3, [r7, #0]
 800095a:	4a35      	ldr	r2, [pc, #212]	; (8000a30 <main+0x508>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	74bb      	strb	r3, [r7, #18]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, hourFirstDigit & 0x01);
 8000964:	7cfb      	ldrb	r3, [r7, #19]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	2101      	movs	r1, #1
 8000970:	4831      	ldr	r0, [pc, #196]	; (8000a38 <main+0x510>)
 8000972:	f000 ff7f 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, hourFirstDigit & 0x02);
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	482d      	ldr	r0, [pc, #180]	; (8000a38 <main+0x510>)
 8000984:	f000 ff76 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, hourFirstDigit & 0x04);
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	2104      	movs	r1, #4
 8000994:	4828      	ldr	r0, [pc, #160]	; (8000a38 <main+0x510>)
 8000996:	f000 ff6d 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, hourFirstDigit & 0x08);
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	2108      	movs	r1, #8
 80009a6:	4824      	ldr	r0, [pc, #144]	; (8000a38 <main+0x510>)
 80009a8:	f000 ff64 	bl	8001874 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, hourSecondDigit & 0x01);
 80009ac:	7cbb      	ldrb	r3, [r7, #18]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	2110      	movs	r1, #16
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <main+0x510>)
 80009ba:	f000 ff5b 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, hourSecondDigit & 0x02);
 80009be:	7cbb      	ldrb	r3, [r7, #18]
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	2120      	movs	r1, #32
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <main+0x510>)
 80009cc:	f000 ff52 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, hourSecondDigit & 0x04);
 80009d0:	7cbb      	ldrb	r3, [r7, #18]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <main+0x510>)
 80009de:	f000 ff49 	bl	8001874 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, hourSecondDigit & 0x08);
 80009e2:	7cbb      	ldrb	r3, [r7, #18]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0x510>)
 80009f0:	f000 ff40 	bl	8001874 <HAL_GPIO_WritePin>
	  }
	  if (tmpAlarm.AlarmTime.Hours == tmpTime.Hours) {
 80009f4:	783a      	ldrb	r2, [r7, #0]
 80009f6:	7a3b      	ldrb	r3, [r7, #8]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f47f adae 	bne.w	800055a <main+0x32>
		  if (tmpAlarm.AlarmTime.Minutes == tmpTime.Minutes) {
 80009fe:	787a      	ldrb	r2, [r7, #1]
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	f47f ada9 	bne.w	800055a <main+0x32>
			  if(tmpAlarm.AlarmTime.Seconds == tmpTime.Seconds) {
 8000a08:	78ba      	ldrb	r2, [r7, #2]
 8000a0a:	7abb      	ldrb	r3, [r7, #10]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f47f ada4 	bne.w	800055a <main+0x32>
				  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a12:	210c      	movs	r1, #12
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <main+0x514>)
 8000a16:	f002 ff17 	bl	8003848 <HAL_TIM_PWM_Start>
				  HAL_Delay(5000);
 8000a1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a1e:	f000 fc9f 	bl	8001360 <HAL_Delay>
				  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000a22:	210c      	movs	r1, #12
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <main+0x514>)
 8000a26:	f002 ff41 	bl	80038ac <HAL_TIM_PWM_Stop>
  {
 8000a2a:	e596      	b.n	800055a <main+0x32>
 8000a2c:	20000028 	.word	0x20000028
 8000a30:	cccccccd 	.word	0xcccccccd
 8000a34:	40011400 	.word	0x40011400
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	20000048 	.word	0x20000048

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09c      	sub	sp, #112	; 0x70
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4a:	2238      	movs	r2, #56	; 0x38
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fc5e 	bl	8004310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fc50 	bl	8004310 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a70:	230a      	movs	r3, #10
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	2301      	movs	r3, #1
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a8c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000a90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 ff26 	bl	80018ec <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fa61 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fa27 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad0:	f000 fa4c 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fc23 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000aec:	f000 fa3e 	bl	8000f6c <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <SystemClock_Config+0xc0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	; 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	42420070 	.word	0x42420070

08000b04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2100      	movs	r1, #0
 8000b10:	460a      	mov	r2, r1
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	460a      	mov	r2, r1
 8000b16:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <MX_RTC_Init+0xc4>)
 8000b28:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b3c:	f001 fe8c 	bl	8002858 <HAL_RTC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 fa11 	bl	8000f6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 12;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b60:	f001 ff10 	bl	8002984 <HAL_RTC_SetTime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 f9ff 	bl	8000f6c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8000b72:	2305      	movs	r3, #5
 8000b74:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 6;
 8000b76:	2306      	movs	r3, #6
 8000b78:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 20;
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000b88:	f002 f86c 	bl	8002c64 <HAL_RTC_SetDate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000b92:	f000 f9eb 	bl	8000f6c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 13;
 8000b9a:	230d      	movs	r3, #13
 8000b9c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 5;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_RTC_Init+0xc0>)
 8000bae:	f002 f9a9 	bl	8002f04 <HAL_RTC_SetAlarm_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000bb8:	f000 f9d8 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000034 	.word	0x20000034
 8000bc8:	40002800 	.word	0x40002800

08000bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b096      	sub	sp, #88	; 0x58
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2220      	movs	r2, #32
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fb83 	bl	8004310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c0c:	4a3e      	ldr	r2, [pc, #248]	; (8000d08 <MX_TIM1_Init+0x13c>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c12:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c38:	4832      	ldr	r0, [pc, #200]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c3a:	f002 fda5 	bl	8003788 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f992 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c52:	4619      	mov	r1, r3
 8000c54:	482b      	ldr	r0, [pc, #172]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c56:	f002 ff3b 	bl	8003ad0 <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c60:	f000 f984 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c64:	4827      	ldr	r0, [pc, #156]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c66:	f002 fdba 	bl	80037de <HAL_TIM_PWM_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c70:	f000 f97c 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c80:	4619      	mov	r1, r3
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000c84:	f003 fa8a 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c8e:	f000 f96d 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c92:	2360      	movs	r3, #96	; 0x60
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8000c96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000cb6:	f002 fe45 	bl	8003944 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cc0:	f000 f954 	bl	8000f6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000ce8:	f003 fa9c 	bl	8004224 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cf2:	f000 f93b 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <MX_TIM1_Init+0x138>)
 8000cf8:	f000 f9c2 	bl	8001080 <HAL_TIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3758      	adds	r7, #88	; 0x58
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000048 	.word	0x20000048
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a45      	ldr	r2, [pc, #276]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a3f      	ldr	r2, [pc, #252]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a33      	ldr	r2, [pc, #204]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <MX_GPIO_Init+0x130>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000d80:	2200      	movs	r2, #0
 8000d82:	f640 013f 	movw	r1, #2111	; 0x83f
 8000d86:	482e      	ldr	r0, [pc, #184]	; (8000e40 <MX_GPIO_Init+0x134>)
 8000d88:	f000 fd74 	bl	8001874 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d92:	482c      	ldr	r0, [pc, #176]	; (8000e44 <MX_GPIO_Init+0x138>)
 8000d94:	f000 fd6e 	bl	8001874 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	21f0      	movs	r1, #240	; 0xf0
 8000d9c:	482a      	ldr	r0, [pc, #168]	; (8000e48 <MX_GPIO_Init+0x13c>)
 8000d9e:	f000 fd69 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000da2:	f640 033f 	movw	r3, #2111	; 0x83f
 8000da6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4821      	ldr	r0, [pc, #132]	; (8000e40 <MX_GPIO_Init+0x134>)
 8000dbc:	f000 fc00 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HourMinus_Pin AlarmSet_Pin SecondMinus_Pin SecondPlus_Pin 
                           MinuteMinus_Pin MinutePlus_Pin HourPlus_Pin */
  GPIO_InitStruct.Pin = HourMinus_Pin|AlarmSet_Pin|SecondMinus_Pin|SecondPlus_Pin 
 8000dc0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000dc4:	613b      	str	r3, [r7, #16]
                          |MinuteMinus_Pin|MinutePlus_Pin|HourPlus_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_GPIO_Init+0x140>)
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <MX_GPIO_Init+0x144>)
 8000dd6:	f000 fbf3 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD14 PD15 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <MX_GPIO_Init+0x138>)
 8000df4:	f000 fbe4 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000df8:	23f0      	movs	r3, #240	; 0xf0
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_GPIO_Init+0x13c>)
 8000e10:	f000 fbd6 	bl	80015c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2017      	movs	r0, #23
 8000e1a:	f000 fb9a 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e1e:	2017      	movs	r0, #23
 8000e20:	f000 fbb3 	bl	800158a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2028      	movs	r0, #40	; 0x28
 8000e2a:	f000 fb92 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f000 fbab 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40011400 	.word	0x40011400
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40011800 	.word	0x40011800

08000e54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]

	UNUSED(GPIO_Pin);
	switch(GPIO_Pin) {
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e64:	d022      	beq.n	8000eac <HAL_GPIO_EXTI_Callback+0x58>
 8000e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e6a:	dc09      	bgt.n	8000e80 <HAL_GPIO_EXTI_Callback+0x2c>
 8000e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e70:	d010      	beq.n	8000e94 <HAL_GPIO_EXTI_Callback+0x40>
 8000e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e76:	d03a      	beq.n	8000eee <HAL_GPIO_EXTI_Callback+0x9a>
 8000e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7c:	d04d      	beq.n	8000f1a <HAL_GPIO_EXTI_Callback+0xc6>
 8000e7e:	e062      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
 8000e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e84:	d01d      	beq.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x6e>
 8000e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e8a:	d025      	beq.n	8000ed8 <HAL_GPIO_EXTI_Callback+0x84>
 8000e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e90:	d038      	beq.n	8000f04 <HAL_GPIO_EXTI_Callback+0xb0>
 8000e92:	e058      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case AlarmSet_Pin: if (alarmflag) alarmflag = 0; else alarmflag = 1; break;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x50>
 8000e9c:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e050      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e04c      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case SecondPlus_Pin: if (alarmflag) sAlarm.AlarmTime.Seconds++; break;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d03d      	beq.n	8000f30 <HAL_GPIO_EXTI_Callback+0xdc>
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000eb6:	789b      	ldrb	r3, [r3, #2]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ebe:	709a      	strb	r2, [r3, #2]
 8000ec0:	e036      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0xdc>
		case MinutePlus_Pin: if (alarmflag) sAlarm.AlarmTime.Minutes++; break;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d034      	beq.n	8000f34 <HAL_GPIO_EXTI_Callback+0xe0>
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ed4:	705a      	strb	r2, [r3, #1]
 8000ed6:	e02d      	b.n	8000f34 <HAL_GPIO_EXTI_Callback+0xe0>
		case HourPlus_Pin: if (alarmflag) sAlarm.AlarmTime.Hours++; break;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d02b      	beq.n	8000f38 <HAL_GPIO_EXTI_Callback+0xe4>
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e024      	b.n	8000f38 <HAL_GPIO_EXTI_Callback+0xe4>
		case SecondMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Seconds--; break;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d022      	beq.n	8000f3c <HAL_GPIO_EXTI_Callback+0xe8>
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f00:	709a      	strb	r2, [r3, #2]
 8000f02:	e01b      	b.n	8000f3c <HAL_GPIO_EXTI_Callback+0xe8>
		case MinuteMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Minutes--; break;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d019      	beq.n	8000f40 <HAL_GPIO_EXTI_Callback+0xec>
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f0e:	785b      	ldrb	r3, [r3, #1]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f16:	705a      	strb	r2, [r3, #1]
 8000f18:	e012      	b.n	8000f40 <HAL_GPIO_EXTI_Callback+0xec>
		case HourMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Hours--; break;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d010      	beq.n	8000f44 <HAL_GPIO_EXTI_Callback+0xf0>
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e009      	b.n	8000f44 <HAL_GPIO_EXTI_Callback+0xf0>
		case SecondPlus_Pin: if (alarmflag) sAlarm.AlarmTime.Seconds++; break;
 8000f30:	bf00      	nop
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case MinutePlus_Pin: if (alarmflag) sAlarm.AlarmTime.Minutes++; break;
 8000f34:	bf00      	nop
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case HourPlus_Pin: if (alarmflag) sAlarm.AlarmTime.Hours++; break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case SecondMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Seconds--; break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case MinuteMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Minutes--; break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0xf2>
		case HourMinus_Pin: if (alarmflag) sAlarm.AlarmTime.Hours--; break;
 8000f44:	bf00      	nop
	}
	if(alarmflag) HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <HAL_GPIO_EXTI_Callback+0x104>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4904      	ldr	r1, [pc, #16]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f54:	f001 ff3c 	bl	8002dd0 <HAL_RTC_SetAlarm>

}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000028 	.word	0x20000028
 8000f64:	2000002c 	.word	0x2000002c
 8000f68:	20000034 	.word	0x20000034

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000

08000fdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <HAL_RTC_MspInit+0x5c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d120      	bne.n	8001030 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000fee:	f000 fc71 	bl	80018d4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_RTC_MspInit+0x60>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_RTC_MspInit+0x60>)
 8000ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_RTC_MspInit+0x60>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_RTC_MspInit+0x64>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fa9c 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 fab5 	bl	800158a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2029      	movs	r0, #41	; 0x29
 8001026:	f000 fa94 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800102a:	2029      	movs	r0, #41	; 0x29
 800102c:	f000 faad 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40002800 	.word	0x40002800
 800103c:	40021000 	.word	0x40021000
 8001040:	4242043c 	.word	0x4242043c

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <HAL_TIM_Base_MspInit+0x34>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10b      	bne.n	800106e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_Base_MspInit+0x38>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_TIM_Base_MspInit+0x38>)
 800105c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_Base_MspInit+0x38>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40012c00 	.word	0x40012c00
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_TIM_MspPostInit+0x80>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d12a      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_TIM_MspPostInit+0x84>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_TIM_MspPostInit+0x84>)
 80010a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_TIM_MspPostInit+0x84>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <HAL_TIM_MspPostInit+0x88>)
 80010ce:	f000 fa77 	bl	80015c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_TIM_MspPostInit+0x8c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_TIM_MspPostInit+0x8c>)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40012c00 	.word	0x40012c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40011800 	.word	0x40011800
 800110c:	40010000 	.word	0x40010000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <HardFault_Handler+0x4>

08001122 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <BusFault_Handler+0x4>

0800112e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f8e4 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <RTC_IRQHandler+0x10>)
 800116a:	f002 fac7 	bl	80036fc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000034 	.word	0x20000034

08001178 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800117c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001180:	f000 fb90 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001184:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001188:	f000 fb8c 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001194:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001198:	f000 fb84 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800119c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011a0:	f000 fb80 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80011a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011a8:	f000 fb7c 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011b0:	f000 fb78 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f000 fb74 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <RTC_Alarm_IRQHandler+0x10>)
 80011c6:	f001 ffc7 	bl	8003158 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000034 	.word	0x20000034

080011d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <SystemInit+0x70>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <SystemInit+0x70>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <SystemInit+0x70>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <SystemInit+0x70>)
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <SystemInit+0x74>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SystemInit+0x70>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <SystemInit+0x70>)
 80011f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <SystemInit+0x70>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <SystemInit+0x70>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <SystemInit+0x70>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <SystemInit+0x70>)
 8001212:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001216:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SystemInit+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <SystemInit+0x70>)
 800121e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <SystemInit+0x70>)
 8001226:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800122a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SystemInit+0x70>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x78>)
 8001234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001238:	609a      	str	r2, [r3, #8]
#endif 
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	f0ff0000 	.word	0xf0ff0000
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001250:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001252:	e003      	b.n	800125c <LoopCopyDataInit>

08001254 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001256:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001258:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800125a:	3104      	adds	r1, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001260:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001264:	d3f6      	bcc.n	8001254 <CopyDataInit>
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001268:	e002      	b.n	8001270 <LoopFillZerobss>

0800126a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800126c:	f842 3b04 	str.w	r3, [r2], #4

08001270 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001272:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001274:	d3f9      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001276:	f7ff ffad 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f003 f825 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800127e:	f7ff f953 	bl	8000528 <main>
  bx lr
 8001282:	4770      	bx	lr
  ldr r3, =_sidata
 8001284:	080043a0 	.word	0x080043a0
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800128c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001294:	2000008c 	.word	0x2000008c

08001298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_2_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x28>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x28>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f945 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fe5e 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f95d 	bl	80015a6 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f925 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000008 	.word	0x20000008
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x1c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x20>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_IncTick+0x20>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000008 	.word	0x20000008
 8001348:	20000088 	.word	0x20000088

0800134c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_GetTick+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000088 	.word	0x20000088

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff fff0 	bl	800134c <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffe0 	bl	800134c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4906      	ldr	r1, [pc, #24]	; (800143c <__NVIC_EnableIRQ+0x34>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff2d 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff42 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff35 	bl	8001408 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	e127      	b.n	8001824 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d4:	2201      	movs	r2, #1
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8116 	bne.w	800181e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d034      	beq.n	8001664 <HAL_GPIO_Init+0xa4>
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d80d      	bhi.n	800161a <HAL_GPIO_Init+0x5a>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d02b      	beq.n	800165a <HAL_GPIO_Init+0x9a>
 8001602:	2b02      	cmp	r3, #2
 8001604:	d804      	bhi.n	8001610 <HAL_GPIO_Init+0x50>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d031      	beq.n	800166e <HAL_GPIO_Init+0xae>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d01c      	beq.n	8001648 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160e:	e048      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001610:	2b03      	cmp	r3, #3
 8001612:	d043      	beq.n	800169c <HAL_GPIO_Init+0xdc>
 8001614:	2b11      	cmp	r3, #17
 8001616:	d01b      	beq.n	8001650 <HAL_GPIO_Init+0x90>
          break;
 8001618:	e043      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800161a:	4a89      	ldr	r2, [pc, #548]	; (8001840 <HAL_GPIO_Init+0x280>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d026      	beq.n	800166e <HAL_GPIO_Init+0xae>
 8001620:	4a87      	ldr	r2, [pc, #540]	; (8001840 <HAL_GPIO_Init+0x280>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d806      	bhi.n	8001634 <HAL_GPIO_Init+0x74>
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_GPIO_Init+0x284>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d020      	beq.n	800166e <HAL_GPIO_Init+0xae>
 800162c:	4a86      	ldr	r2, [pc, #536]	; (8001848 <HAL_GPIO_Init+0x288>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01d      	beq.n	800166e <HAL_GPIO_Init+0xae>
          break;
 8001632:	e036      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001634:	4a85      	ldr	r2, [pc, #532]	; (800184c <HAL_GPIO_Init+0x28c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0xae>
 800163a:	4a85      	ldr	r2, [pc, #532]	; (8001850 <HAL_GPIO_Init+0x290>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d016      	beq.n	800166e <HAL_GPIO_Init+0xae>
 8001640:	4a84      	ldr	r2, [pc, #528]	; (8001854 <HAL_GPIO_Init+0x294>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0xae>
          break;
 8001646:	e02c      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e028      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	3304      	adds	r3, #4
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e023      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	3308      	adds	r3, #8
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e01e      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	330c      	adds	r3, #12
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e019      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001676:	2304      	movs	r3, #4
 8001678:	623b      	str	r3, [r7, #32]
          break;
 800167a:	e012      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	611a      	str	r2, [r3, #16]
          break;
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001690:	2308      	movs	r3, #8
 8001692:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	615a      	str	r2, [r3, #20]
          break;
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2bff      	cmp	r3, #255	; 0xff
 80016a6:	d801      	bhi.n	80016ac <HAL_GPIO_Init+0xec>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	e001      	b.n	80016b0 <HAL_GPIO_Init+0xf0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3304      	adds	r3, #4
 80016b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d802      	bhi.n	80016be <HAL_GPIO_Init+0xfe>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_Init+0x104>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3b08      	subs	r3, #8
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	210f      	movs	r1, #15
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	6a39      	ldr	r1, [r7, #32]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	431a      	orrs	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8096 	beq.w	800181e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f2:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_GPIO_Init+0x298>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_GPIO_Init+0x298>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_GPIO_Init+0x298>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_GPIO_Init+0x29c>)
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_GPIO_Init+0x2a0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x19e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x2a4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x19a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x196>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x192>
 800174e:	2303      	movs	r3, #3
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x1a0>
 8001752:	2304      	movs	r3, #4
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x1a0>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x1a0>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x1a0>
 800175e:	2300      	movs	r3, #0
 8001760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001770:	493a      	ldr	r1, [pc, #232]	; (800185c <HAL_GPIO_Init+0x29c>)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4938      	ldr	r1, [pc, #224]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4933      	ldr	r1, [pc, #204]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	492e      	ldr	r1, [pc, #184]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4929      	ldr	r1, [pc, #164]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	4924      	ldr	r1, [pc, #144]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	491f      	ldr	r1, [pc, #124]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	491a      	ldr	r1, [pc, #104]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	60cb      	str	r3, [r1, #12]
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4915      	ldr	r1, [pc, #84]	; (8001870 <HAL_GPIO_Init+0x2b0>)
 800181a:	4013      	ands	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f aed0 	bne.w	80015d4 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	bf00      	nop
 8001836:	372c      	adds	r7, #44	; 0x2c
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	10210000 	.word	0x10210000
 8001844:	10110000 	.word	0x10110000
 8001848:	10120000 	.word	0x10120000
 800184c:	10310000 	.word	0x10310000
 8001850:	10320000 	.word	0x10320000
 8001854:	10220000 	.word	0x10220000
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000
 8001860:	40010800 	.word	0x40010800
 8001864:	40010c00 	.word	0x40010c00
 8001868:	40011000 	.word	0x40011000
 800186c:	40011400 	.word	0x40011400
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fac6 	bl	8000e54 <HAL_GPIO_EXTI_Callback>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	420e0020 	.word	0x420e0020

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e304      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8087 	beq.w	8001a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800190c:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d00c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d112      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d10b      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x12c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d168      	bne.n	8001a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e2de      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x76>
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7f      	ldr	r2, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02e      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a77      	ldr	r2, [pc, #476]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xbc>
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 80019a8:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fcc0 	bl	800134c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fcbc 	bl	800134c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e292      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe4>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcac 	bl	800134c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fca8 	bl	800134c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e27e      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x10c>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e252      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4939      	ldr	r1, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc61 	bl	800134c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fc5d 	bl	800134c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e233      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc40 	bl	800134c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc3c 	bl	800134c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e212      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03a      	beq.n	8001b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d019      	beq.n	8001b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fc20 	bl	800134c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc1c 	bl	800134c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1f2      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 fbde 	bl	80022f0 <RCC_Delay>
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fc06 	bl	800134c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fc02 	bl	800134c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d908      	bls.n	8001b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1d8      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	42420000 	.word	0x42420000
 8001b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b9b      	ldr	r3, [pc, #620]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e9      	bne.n	8001b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a6 	beq.w	8001cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a90      	ldr	r2, [pc, #576]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b8e      	ldr	r3, [pc, #568]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x4ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a87      	ldr	r2, [pc, #540]	; (8001dd8 <HAL_RCC_OscConfig+0x4ec>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fbc3 	bl	800134c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fbbf 	bl	800134c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e195      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b7e      	ldr	r3, [pc, #504]	; (8001dd8 <HAL_RCC_OscConfig+0x4ec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a72      	ldr	r2, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a6f      	ldr	r2, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	e01c      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x356>
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c42:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a63      	ldr	r2, [pc, #396]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d015      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb73 	bl	800134c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff fb6f 	bl	800134c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e143      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCC_OscConfig+0x37e>
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb5d 	bl	800134c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb59 	bl	800134c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e12d      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a44      	ldr	r2, [pc, #272]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 808c 	beq.w	8001dec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d10e      	bne.n	8001d00 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e103      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0ef      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_RCC_OscConfig+0x4f0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb0d 	bl	800134c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d36:	f7ff fb09 	bl	800134c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0df      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	491c      	ldr	r1, [pc, #112]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_RCC_OscConfig+0x4f0>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fae5 	bl	800134c <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d86:	f7ff fae1 	bl	800134c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b64      	cmp	r3, #100	; 0x64
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0b7      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x49a>
 8001da4:	e022      	b.n	8001dec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x4f0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fac8 	bl	800134c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001dc0:	f7ff fac4 	bl	800134c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e09a      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e9      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8088 	beq.w	8001f06 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d068      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d14d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x628>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa9c 	bl	800134c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff fa98 	bl	800134c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e06e      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d10f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001e40:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4931      	ldr	r1, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	492d      	ldr	r1, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	430b      	orrs	r3, r1
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x628>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fa65 	bl	800134c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff fa61 	bl	800134c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e037      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x59a>
 8001ea4:	e02f      	b.n	8001f06 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x628>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa4e 	bl	800134c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff fa4a 	bl	800134c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e020      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c8>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x624>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	42420060 	.word	0x42420060

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d0      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e073      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7ff f9a0 	bl	800134c <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7ff f99c 	bl	800134c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e053      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4601      	mov	r1, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	fa21 f303 	lsr.w	r3, r1, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f8fe 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08004378 	.word	0x08004378
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020f0:	b091      	sub	sp, #68	; 0x44
 80020f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80020f6:	f107 0414 	add.w	r4, r7, #20
 80020fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fc:	c407      	stmia	r4!, {r0, r1, r2}
 80020fe:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002102:	1d3c      	adds	r4, r7, #4
 8002104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
 8002112:	2300      	movs	r3, #0
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d002      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x50>
 8002136:	2b08      	cmp	r3, #8
 8002138:	d003      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x56>
 800213a:	e0a7      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800213c:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002140:	e0a7      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	0c9b      	lsrs	r3, r3, #18
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800214e:	4413      	add	r3, r2
 8002150:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 808d 	beq.w	800227c <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800216e:	4413      	add	r3, r2
 8002170:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002176:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06a      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	3301      	adds	r3, #1
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002190:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3302      	adds	r3, #2
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	f04f 0400 	mov.w	r4, #0
 80021ac:	fb03 f502 	mul.w	r5, r3, r2
 80021b0:	fb01 f004 	mul.w	r0, r1, r4
 80021b4:	4428      	add	r0, r5
 80021b6:	fba1 5603 	umull	r5, r6, r1, r3
 80021ba:	1983      	adds	r3, r0, r6
 80021bc:	461e      	mov	r6, r3
 80021be:	4629      	mov	r1, r5
 80021c0:	4632      	mov	r2, r6
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	0154      	lsls	r4, r2, #5
 80021cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021d0:	014b      	lsls	r3, r1, #5
 80021d2:	4619      	mov	r1, r3
 80021d4:	4622      	mov	r2, r4
 80021d6:	1b49      	subs	r1, r1, r5
 80021d8:	eb62 0206 	sbc.w	r2, r2, r6
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f04f 0400 	mov.w	r4, #0
 80021e4:	0194      	lsls	r4, r2, #6
 80021e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021ea:	018b      	lsls	r3, r1, #6
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	eb64 0402 	sbc.w	r4, r4, r2
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	00e2      	lsls	r2, r4, #3
 80021fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002200:	00d9      	lsls	r1, r3, #3
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	195b      	adds	r3, r3, r5
 8002208:	eb44 0406 	adc.w	r4, r4, r6
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	0262      	lsls	r2, r4, #9
 8002216:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800221a:	0259      	lsls	r1, r3, #9
 800221c:	460b      	mov	r3, r1
 800221e:	4614      	mov	r4, r2
 8002220:	4698      	mov	r8, r3
 8002222:	46a1      	mov	r9, r4
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	f04f 0400 	mov.w	r4, #0
 8002232:	fb03 f502 	mul.w	r5, r3, r2
 8002236:	fb01 f004 	mul.w	r0, r1, r4
 800223a:	4428      	add	r0, r5
 800223c:	fba1 3403 	umull	r3, r4, r1, r3
 8002240:	1902      	adds	r2, r0, r4
 8002242:	4614      	mov	r4, r2
 8002244:	461a      	mov	r2, r3
 8002246:	4623      	mov	r3, r4
 8002248:	4640      	mov	r0, r8
 800224a:	4649      	mov	r1, r9
 800224c:	f7fd ffea 	bl	8000224 <__aeabi_uldivmod>
 8002250:	4603      	mov	r3, r0
 8002252:	460c      	mov	r4, r1
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002256:	e007      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 800225c:	fb02 f203 	mul.w	r2, r2, r3
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002268:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800226c:	461a      	mov	r2, r3
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8002274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002294:	4618      	mov	r0, r3
 8002296:	3744      	adds	r7, #68	; 0x44
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800229e:	bf00      	nop
 80022a0:	08004338 	.word	0x08004338
 80022a4:	08004348 	.word	0x08004348
 80022a8:	40021000 	.word	0x40021000
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022cc:	f7ff fff2 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d0:	4601      	mov	r1, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0adb      	lsrs	r3, r3, #11
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08004388 	.word	0x08004388

080022f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <RCC_Delay+0x34>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <RCC_Delay+0x38>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0a5b      	lsrs	r3, r3, #9
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800230c:	bf00      	nop
  }
  while (Delay --);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1e5a      	subs	r2, r3, #1
 8002312:	60fa      	str	r2, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <RCC_Delay+0x1c>
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d07d      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10d      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a87      	ldr	r2, [pc, #540]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	61d3      	str	r3, [r2, #28]
 8002368:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b82      	ldr	r3, [pc, #520]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d118      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002384:	4b7f      	ldr	r3, [pc, #508]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7e      	ldr	r2, [pc, #504]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002390:	f7fe ffdc 	bl	800134c <HAL_GetTick>
 8002394:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	e008      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe ffd8 	bl	800134c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0e5      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02e      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d027      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023ea:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe ffa7 	bl	800134c <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe ffa3 	bl	800134c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0ae      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ee      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002424:	4b56      	ldr	r3, [pc, #344]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4953      	ldr	r1, [pc, #332]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002432:	4313      	orrs	r3, r2
 8002434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002436:	7efb      	ldrb	r3, [r7, #27]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a4f      	ldr	r2, [pc, #316]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4947      	ldr	r1, [pc, #284]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4940      	ldr	r1, [pc, #256]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002480:	4313      	orrs	r3, r2
 8002482:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4938      	ldr	r1, [pc, #224]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80024a2:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d148      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d138      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e042      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4920      	ldr	r1, [pc, #128]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	491c      	ldr	r1, [pc, #112]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002510:	4313      	orrs	r3, r2
 8002512:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe ff17 	bl	800134c <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002522:	f7fe ff13 	bl	800134c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e020      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002540:	e009      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4904      	ldr	r1, [pc, #16]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	42420440 	.word	0x42420440
 800258c:	42420070 	.word	0x42420070

08002590 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b093      	sub	sp, #76	; 0x4c
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002598:	4ba9      	ldr	r3, [pc, #676]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800259a:	f107 0418 	add.w	r4, r7, #24
 800259e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a0:	c407      	stmia	r4!, {r0, r1, r2}
 80025a2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80025a4:	4ba7      	ldr	r3, [pc, #668]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80025a6:	f107 0408 	add.w	r4, r7, #8
 80025aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b4:	2300      	movs	r3, #0
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	2300      	movs	r3, #0
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80025cc:	2300      	movs	r3, #0
 80025ce:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	f200 8124 	bhi.w	8002822 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080027a1 	.word	0x080027a1
 80025e4:	08002807 	.word	0x08002807
 80025e8:	08002823 	.word	0x08002823
 80025ec:	080026ff 	.word	0x080026ff
 80025f0:	08002823 	.word	0x08002823
 80025f4:	08002823 	.word	0x08002823
 80025f8:	08002823 	.word	0x08002823
 80025fc:	08002751 	.word	0x08002751
 8002600:	08002823 	.word	0x08002823
 8002604:	08002823 	.word	0x08002823
 8002608:	08002823 	.word	0x08002823
 800260c:	08002823 	.word	0x08002823
 8002610:	08002823 	.word	0x08002823
 8002614:	08002823 	.word	0x08002823
 8002618:	08002823 	.word	0x08002823
 800261c:	08002621 	.word	0x08002621
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002620:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80f9 	beq.w	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	0c9b      	lsrs	r3, r3, #18
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002640:	4413      	add	r3, r2
 8002642:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03e      	beq.n	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002652:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800265e:	4413      	add	r3, r2
 8002660:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002664:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002666:	4b78      	ldr	r3, [pc, #480]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002672:	4b75      	ldr	r3, [pc, #468]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	3301      	adds	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002680:	4b71      	ldr	r3, [pc, #452]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3302      	adds	r3, #2
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002698:	fb02 f203 	mul.w	r2, r2, r3
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
 80026aa:	e007      	b.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026ac:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80026ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80026bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c0:	461a      	mov	r2, r3
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	e004      	b.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	4a5f      	ldr	r2, [pc, #380]	; (8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e6:	d102      	bne.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80026ec:	e09b      	b.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 80026ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026fc:	e093      	b.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80026fe:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800270a:	f7ff fcef 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 800270e:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002710:	e08b      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8085 	beq.w	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3301      	adds	r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	0b1b      	lsrs	r3, r3, #12
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	3302      	adds	r3, #2
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800273c:	4a43      	ldr	r2, [pc, #268]	; (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800274e:	e06c      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8002750:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 800275c:	f7ff fcc6 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8002760:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002762:	e064      	b.n	800282e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002764:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05e      	beq.n	800282e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002770:	4b35      	ldr	r3, [pc, #212]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3301      	adds	r3, #1
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	0b1b      	lsrs	r3, r3, #12
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	3302      	adds	r3, #2
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800278c:	4a2f      	ldr	r2, [pc, #188]	; (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800279e:	e046      	b.n	800282e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d108      	bne.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 80027bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
 80027c2:	e01f      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ce:	d109      	bne.n	80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80027dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80027e0:	643b      	str	r3, [r7, #64]	; 0x40
 80027e2:	e00f      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ee:	d120      	bne.n	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01a      	beq.n	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 80027fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002802:	e016      	b.n	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8002804:	e015      	b.n	8002832 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002806:	f7ff fd5f 	bl	80022c8 <HAL_RCC_GetPCLK2Freq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0b9b      	lsrs	r3, r3, #14
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002820:	e008      	b.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8002822:	bf00      	nop
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8002832:	bf00      	nop
    }
  }
  return (frequency);
 8002834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002836:	4618      	mov	r0, r3
 8002838:	374c      	adds	r7, #76	; 0x4c
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	bf00      	nop
 8002840:	08004358 	.word	0x08004358
 8002844:	08004368 	.word	0x08004368
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	003d0900 	.word	0x003d0900
 8002854:	aaaaaaab 	.word	0xaaaaaaab

08002858 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e084      	b.n	8002978 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7c5b      	ldrb	r3, [r3, #17]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fbac 	bl	8000fdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fc95 	bl	80031ba <HAL_RTC_WaitForSynchro>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e06b      	b.n	8002978 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fd4e 	bl	8003342 <RTC_EnterInitMode>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2204      	movs	r2, #4
 80028b0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e060      	b.n	8002978 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0207 	bic.w	r2, r2, #7
 80028c4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RTC_Init+0x128>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_RTC_Init+0x128>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RTC_Init+0x128>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4926      	ldr	r1, [pc, #152]	; (8002980 <HAL_RTC_Init+0x128>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d003      	beq.n	80028fe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e00e      	b.n	800291c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff fe46 	bl	8002590 <HAL_RCCEx_GetPeriphCLKFreq>
 8002904:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e030      	b.n	8002978 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 010f 	bic.w	r1, r3, #15
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0c1a      	lsrs	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	b291      	uxth	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	430b      	orrs	r3, r1
 8002946:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fd22 	bl	8003392 <RTC_ExitInitMode>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00c      	b.n	8002978 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40006c00 	.word	0x40006c00

08002984 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_RTC_SetTime+0x20>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e080      	b.n	8002aaa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	7c1b      	ldrb	r3, [r3, #16]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_RTC_SetTime+0x30>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e07a      	b.n	8002aaa <HAL_RTC_SetTime+0x126>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80029d0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	4619      	mov	r1, r3
 80029da:	460b      	mov	r3, r1
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a5b      	subs	r3, r3, r1
 80029e0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80029e2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e01e      	b.n	8002a2c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fd12 	bl	800341c <RTC_Bcd2ToByte>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a00:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fd07 	bl	800341c <RTC_Bcd2ToByte>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	4613      	mov	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a1a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	789b      	ldrb	r3, [r3, #2]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fcfb 	bl	800341c <RTC_Bcd2ToByte>
 8002a26:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a28:	4423      	add	r3, r4
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a2c:	6979      	ldr	r1, [r7, #20]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fc20 	bl	8003274 <RTC_WriteTimeCounter>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e02f      	b.n	8002aaa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0205 	bic.w	r2, r2, #5
 8002a58:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fc31 	bl	80032c2 <RTC_ReadAlarmCounter>
 8002a60:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d018      	beq.n	8002a9c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d214      	bcs.n	8002a9c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a7c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a7e:	6939      	ldr	r1, [r7, #16]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fc37 	bl	80032f4 <RTC_WriteAlarmCounter>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e006      	b.n	8002aaa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
	...

08002ab4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RTC_GetTime+0x28>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b5      	b.n	8002c4c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0ac      	b.n	8002c4c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fb8e 	bl	8003214 <RTC_ReadTimeCounter>
 8002af8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_RTC_GetTime+0x1a0>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0adb      	lsrs	r3, r3, #11
 8002b04:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4b52      	ldr	r3, [pc, #328]	; (8002c54 <HAL_RTC_GetTime+0x1a0>)
 8002b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	4a4f      	ldr	r2, [pc, #316]	; (8002c58 <HAL_RTC_GetTime+0x1a4>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4a4a      	ldr	r2, [pc, #296]	; (8002c54 <HAL_RTC_GetTime+0x1a0>)
 8002b2c:	fba2 1203 	umull	r1, r2, r2, r3
 8002b30:	0ad2      	lsrs	r2, r2, #11
 8002b32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b36:	fb01 f202 	mul.w	r2, r1, r2
 8002b3a:	1a9a      	subs	r2, r3, r2
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_RTC_GetTime+0x1a4>)
 8002b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b42:	0959      	lsrs	r1, r3, #5
 8002b44:	460b      	mov	r3, r1
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a5b      	subs	r3, r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	1ad1      	subs	r1, r2, r3
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b17      	cmp	r3, #23
 8002b58:	d955      	bls.n	8002c06 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	; (8002c5c <HAL_RTC_GetTime+0x1a8>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RTC_GetTime+0x1a8>)
 8002b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b6e:	091a      	lsrs	r2, r3, #4
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1aca      	subs	r2, r1, r3
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fb9e 	bl	80032c2 <RTC_ReadAlarmCounter>
 8002b86:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RTC_GetTime+0xee>
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d904      	bls.n	8002ba2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	e002      	b.n	8002ba8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_RTC_GetTime+0x1ac>)
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fb5b 	bl	8003274 <RTC_WriteTimeCounter>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e041      	b.n	8002c4c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d00c      	beq.n	8002bea <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002bd8:	69f9      	ldr	r1, [r7, #28]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fb8a 	bl	80032f4 <RTC_WriteAlarmCounter>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e030      	b.n	8002c4c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002bea:	69f9      	ldr	r1, [r7, #28]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fb81 	bl	80032f4 <RTC_WriteAlarmCounter>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e027      	b.n	8002c4c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fc29 	bl	8003456 <RTC_DateUpdate>
 8002c04:	e003      	b.n	8002c0e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01a      	beq.n	8002c4a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fbe2 	bl	80033e2 <RTC_ByteToBcd2>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fbd9 	bl	80033e2 <RTC_ByteToBcd2>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	789b      	ldrb	r3, [r3, #2]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fbd0 	bl	80033e2 <RTC_ByteToBcd2>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	91a2b3c5 	.word	0x91a2b3c5
 8002c58:	88888889 	.word	0x88888889
 8002c5c:	aaaaaaab 	.word	0xaaaaaaab
 8002c60:	00015180 	.word	0x00015180

08002c64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RTC_SetDate+0x24>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e097      	b.n	8002dbc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	7c1b      	ldrb	r3, [r3, #16]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_RTC_SetDate+0x34>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e091      	b.n	8002dbc <HAL_RTC_SetDate+0x158>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	78da      	ldrb	r2, [r3, #3]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	785a      	ldrb	r2, [r3, #1]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	789a      	ldrb	r2, [r3, #2]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	739a      	strb	r2, [r3, #14]
 8002cc2:	e01a      	b.n	8002cfa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fba7 	bl	800341c <RTC_Bcd2ToByte>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fb9e 	bl	800341c <RTC_Bcd2ToByte>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	789b      	ldrb	r3, [r3, #2]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fb95 	bl	800341c <RTC_Bcd2ToByte>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	7bdb      	ldrb	r3, [r3, #15]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	7b59      	ldrb	r1, [r3, #13]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	7b9b      	ldrb	r3, [r3, #14]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f000 fc7f 	bl	800360c <RTC_WeekDayNum>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	7b1a      	ldrb	r2, [r3, #12]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa78 	bl	8003214 <RTC_ReadTimeCounter>
 8002d24:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <HAL_RTC_SetDate+0x160>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0adb      	lsrs	r3, r3, #11
 8002d30:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b18      	cmp	r3, #24
 8002d36:	d93a      	bls.n	8002dae <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_RTC_SetDate+0x164>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <HAL_RTC_SetDate+0x168>)
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa8f 	bl	8003274 <RTC_WriteTimeCounter>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e027      	b.n	8002dbc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 faa8 	bl	80032c2 <RTC_ReadAlarmCounter>
 8002d72:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d018      	beq.n	8002dae <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d214      	bcs.n	8002dae <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002d8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d8e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 faae 	bl	80032f4 <RTC_WriteAlarmCounter>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2204      	movs	r2, #4
 8002da2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e006      	b.n	8002dbc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	91a2b3c5 	.word	0x91a2b3c5
 8002dc8:	aaaaaaab 	.word	0xaaaaaaab
 8002dcc:	00015180 	.word	0x00015180

08002dd0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2100      	movs	r1, #0
 8002de6:	460a      	mov	r2, r1
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	460a      	mov	r2, r1
 8002dec:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_RTC_SetAlarm+0x2a>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07d      	b.n	8002efa <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	7c1b      	ldrb	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RTC_SetAlarm+0x3a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e077      	b.n	8002efa <HAL_RTC_SetAlarm+0x12a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2202      	movs	r2, #2
 8002e14:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fe48 	bl	8002ab4 <HAL_RTC_GetTime>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e065      	b.n	8002efa <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e2e:	7d3b      	ldrb	r3, [r7, #20]
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002e36:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002e3a:	7d7b      	ldrb	r3, [r7, #21]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	460b      	mov	r3, r1
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a5b      	subs	r3, r3, r1
 8002e44:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e46:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002e48:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e4a:	4413      	add	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d113      	bne.n	8002e7c <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002e5e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	4619      	mov	r1, r3
 8002e68:	460b      	mov	r3, r1
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a5b      	subs	r3, r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002e70:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002e76:	4413      	add	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e01e      	b.n	8002eba <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 facb 	bl	800341c <RTC_Bcd2ToByte>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002e8e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	785b      	ldrb	r3, [r3, #1]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fac0 	bl	800341c <RTC_Bcd2ToByte>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002ea8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fab4 	bl	800341c <RTC_Bcd2ToByte>
 8002eb4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002eb6:	4423      	add	r3, r4
 8002eb8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d205      	bcs.n	8002ece <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002ec8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ecc:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ece:	69f9      	ldr	r1, [r7, #28]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa0f 	bl	80032f4 <RTC_WriteAlarmCounter>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e006      	b.n	8002efa <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd90      	pop	{r4, r7, pc}
	...

08002f04 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2100      	movs	r1, #0
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	460a      	mov	r2, r1
 8002f20:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_RTC_SetAlarm_IT+0x2a>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e096      	b.n	8003060 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	7c1b      	ldrb	r3, [r3, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_RTC_SetAlarm_IT+0x3a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e090      	b.n	8003060 <HAL_RTC_SetAlarm_IT+0x15c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4619      	mov	r1, r3
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fdae 	bl	8002ab4 <HAL_RTC_GetTime>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07e      	b.n	8003060 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002f62:	7d3b      	ldrb	r3, [r7, #20]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f6a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002f6e:	7d7b      	ldrb	r3, [r7, #21]
 8002f70:	4619      	mov	r1, r3
 8002f72:	460b      	mov	r3, r1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a5b      	subs	r3, r3, r1
 8002f78:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002f7a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002f7c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002f7e:	4413      	add	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a5b      	subs	r3, r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002fa4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002faa:	4413      	add	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	e01e      	b.n	8002fee <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa31 	bl	800341c <RTC_Bcd2ToByte>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002fc2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa26 	bl	800341c <RTC_Bcd2ToByte>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002fdc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	789b      	ldrb	r3, [r3, #2]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fa1a 	bl	800341c <RTC_Bcd2ToByte>
 8002fe8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002fea:	4423      	add	r3, r4
 8002fec:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d205      	bcs.n	8003002 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002ffc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003000:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f975 	bl	80032f4 <RTC_WriteAlarmCounter>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2204      	movs	r2, #4
 8003014:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e01f      	b.n	8003060 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0202 	mvn.w	r2, #2
 8003028:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0202 	orr.w	r2, r2, #2
 8003038:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RTC_SetAlarm_IT+0x164>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_RTC_SetAlarm_IT+0x164>)
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_RTC_SetAlarm_IT+0x164>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_RTC_SetAlarm_IT+0x164>)
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	3724      	adds	r7, #36	; 0x24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_RTC_GetAlarm+0x1e>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e05a      	b.n	8003144 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f917 	bl	80032c2 <RTC_ReadAlarmCounter>
 8003094:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	4a2c      	ldr	r2, [pc, #176]	; (800314c <HAL_RTC_GetAlarm+0xe0>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0ad9      	lsrs	r1, r3, #11
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RTC_GetAlarm+0xe4>)
 80030a2:	fba3 2301 	umull	r2, r3, r3, r1
 80030a6:	091a      	lsrs	r2, r3, #4
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1aca      	subs	r2, r1, r3
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RTC_GetAlarm+0xe0>)
 80030bc:	fba3 1302 	umull	r1, r3, r3, r2
 80030c0:	0adb      	lsrs	r3, r3, #11
 80030c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	4a21      	ldr	r2, [pc, #132]	; (8003154 <HAL_RTC_GetAlarm+0xe8>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_RTC_GetAlarm+0xe0>)
 80030de:	fba2 1203 	umull	r1, r2, r2, r3
 80030e2:	0ad2      	lsrs	r2, r2, #11
 80030e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80030e8:	fb01 f202 	mul.w	r2, r1, r2
 80030ec:	1a9a      	subs	r2, r3, r2
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RTC_GetAlarm+0xe8>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	0959      	lsrs	r1, r3, #5
 80030f6:	460b      	mov	r3, r1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a5b      	subs	r3, r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	1ad1      	subs	r1, r2, r3
 8003100:	b2ca      	uxtb	r2, r1
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01a      	beq.n	8003142 <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f966 	bl	80033e2 <RTC_ByteToBcd2>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f95d 	bl	80033e2 <RTC_ByteToBcd2>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	789b      	ldrb	r3, [r3, #2]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f954 	bl	80033e2 <RTC_ByteToBcd2>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	91a2b3c5 	.word	0x91a2b3c5
 8003150:	aaaaaaab 	.word	0xaaaaaaab
 8003154:	88888889 	.word	0x88888889

08003158 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f813 	bl	80031a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0202 	mvn.w	r2, #2
 800318a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800318e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003192:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	745a      	strb	r2, [r3, #17]
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01d      	b.n	800320c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0208 	bic.w	r2, r2, #8
 80031de:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80031e0:	f7fe f8b4 	bl	800134c <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80031e6:	e009      	b.n	80031fc <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80031e8:	f7fe f8b0 	bl	800134c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f6:	d901      	bls.n	80031fc <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e007      	b.n	800320c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	827b      	strh	r3, [r7, #18]
 8003220:	2300      	movs	r3, #0
 8003222:	823b      	strh	r3, [r7, #16]
 8003224:	2300      	movs	r3, #0
 8003226:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003244:	8a7a      	ldrh	r2, [r7, #18]
 8003246:	8a3b      	ldrh	r3, [r7, #16]
 8003248:	429a      	cmp	r2, r3
 800324a:	d008      	beq.n	800325e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800324c:	8a3b      	ldrh	r3, [r7, #16]
 800324e:	041a      	lsls	r2, r3, #16
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	b29b      	uxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e004      	b.n	8003268 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800325e:	8a7b      	ldrh	r3, [r7, #18]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003268:	697b      	ldr	r3, [r7, #20]
}
 800326a:	4618      	mov	r0, r3
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f85d 	bl	8003342 <RTC_EnterInitMode>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e011      	b.n	80032b8 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	0c12      	lsrs	r2, r2, #16
 800329c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	b292      	uxth	r2, r2
 80032a6:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f872 	bl	8003392 <RTC_ExitInitMode>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	81fb      	strh	r3, [r7, #14]
 80032ce:	2300      	movs	r3, #0
 80032d0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	89bb      	ldrh	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f81d 	bl	8003342 <RTC_EnterInitMode>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e011      	b.n	8003338 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	0c12      	lsrs	r2, r2, #16
 800331c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	b292      	uxth	r2, r2
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f832 	bl	8003392 <RTC_ExitInitMode>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800334e:	f7fd fffd 	bl	800134c <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003354:	e009      	b.n	800336a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003356:	f7fd fff9 	bl	800134c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003364:	d901      	bls.n	800336a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0210 	orr.w	r2, r2, #16
 8003386:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0210 	bic.w	r2, r2, #16
 80033ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80033ae:	f7fd ffcd 	bl	800134c <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033b4:	e009      	b.n	80033ca <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033b6:	f7fd ffc9 	bl	800134c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c4:	d901      	bls.n	80033ca <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e007      	b.n	80033da <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80033f0:	e005      	b.n	80033fe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	3b0a      	subs	r3, #10
 80033fc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d8f6      	bhi.n	80033f2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	b2da      	uxtb	r2, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4313      	orrs	r3, r2
 8003410:	b2db      	uxtb	r3, r3
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4413      	add	r3, r2
 800344a:	b2db      	uxtb	r3, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7bdb      	ldrb	r3, [r3, #15]
 8003474:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7b5b      	ldrb	r3, [r3, #13]
 800347a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7b9b      	ldrb	r3, [r3, #14]
 8003480:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	e06f      	b.n	8003568 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d011      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d00e      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d00b      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b07      	cmp	r3, #7
 800349e:	d008      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d005      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d002      	beq.n	80034b2 <RTC_DateUpdate+0x5c>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d117      	bne.n	80034e2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b1e      	cmp	r3, #30
 80034b6:	d803      	bhi.n	80034c0 <RTC_DateUpdate+0x6a>
      {
        day++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80034be:	e050      	b.n	8003562 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d005      	beq.n	80034d2 <RTC_DateUpdate+0x7c>
        {
          month++;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	3301      	adds	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
          day = 1U;
 80034cc:	2301      	movs	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80034d0:	e047      	b.n	8003562 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80034d2:	2301      	movs	r3, #1
 80034d4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80034d6:	2301      	movs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
          year++;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80034e0:	e03f      	b.n	8003562 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d008      	beq.n	80034fa <RTC_DateUpdate+0xa4>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d005      	beq.n	80034fa <RTC_DateUpdate+0xa4>
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d002      	beq.n	80034fa <RTC_DateUpdate+0xa4>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b0b      	cmp	r3, #11
 80034f8:	d10c      	bne.n	8003514 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b1d      	cmp	r3, #29
 80034fe:	d803      	bhi.n	8003508 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003506:	e02c      	b.n	8003562 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3301      	adds	r3, #1
 800350c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003512:	e026      	b.n	8003562 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d123      	bne.n	8003562 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b1b      	cmp	r3, #27
 800351e:	d803      	bhi.n	8003528 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e01c      	b.n	8003562 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b1c      	cmp	r3, #28
 800352c:	d111      	bne.n	8003552 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f838 	bl	80035a8 <RTC_IsLeapYear>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <RTC_DateUpdate+0xf0>
        {
          day++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e00d      	b.n	8003562 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3301      	adds	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800354c:	2301      	movs	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e007      	b.n	8003562 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b1d      	cmp	r3, #29
 8003556:	d104      	bne.n	8003562 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3301      	adds	r3, #1
 800355c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800355e:	2301      	movs	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3301      	adds	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d38b      	bcc.n	8003488 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	4619      	mov	r1, r3
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f000 f83a 	bl	800360c <RTC_WeekDayNum>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	731a      	strb	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	e01d      	b.n	80035fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4a10      	ldr	r2, [pc, #64]	; (8003608 <RTC_IsLeapYear+0x60>)
 80035c6:	fba2 1203 	umull	r1, r2, r2, r3
 80035ca:	0952      	lsrs	r2, r2, #5
 80035cc:	2164      	movs	r1, #100	; 0x64
 80035ce:	fb01 f202 	mul.w	r2, r1, r2
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <RTC_IsLeapYear+0x60>)
 80035e2:	fba2 1203 	umull	r1, r2, r2, r3
 80035e6:	09d2      	lsrs	r2, r2, #7
 80035e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80035ec:	fb01 f202 	mul.w	r2, r1, r2
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80035fc:	2300      	movs	r3, #0
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	51eb851f 	.word	0x51eb851f

0800360c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
 8003618:	4613      	mov	r3, r2
 800361a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800362a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d82d      	bhi.n	800368e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <RTC_WeekDayNum+0xe4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	085a      	lsrs	r2, r3, #1
 8003646:	78bb      	ldrb	r3, [r7, #2]
 8003648:	441a      	add	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	441a      	add	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3b01      	subs	r3, #1
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	4926      	ldr	r1, [pc, #152]	; (80036f4 <RTC_WeekDayNum+0xe8>)
 800365c:	fba1 1303 	umull	r1, r3, r1, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3b01      	subs	r3, #1
 8003668:	4922      	ldr	r1, [pc, #136]	; (80036f4 <RTC_WeekDayNum+0xe8>)
 800366a:	fba1 1303 	umull	r1, r3, r1, r3
 800366e:	09db      	lsrs	r3, r3, #7
 8003670:	4413      	add	r3, r2
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <RTC_WeekDayNum+0xec>)
 8003676:	fba3 1302 	umull	r1, r3, r3, r2
 800367a:	1ad1      	subs	r1, r2, r3
 800367c:	0849      	lsrs	r1, r1, #1
 800367e:	440b      	add	r3, r1
 8003680:	0899      	lsrs	r1, r3, #2
 8003682:	460b      	mov	r3, r1
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a5b      	subs	r3, r3, r1
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e029      	b.n	80036e2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <RTC_WeekDayNum+0xe4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	085a      	lsrs	r2, r3, #1
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	441a      	add	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	441a      	add	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	441a      	add	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4910      	ldr	r1, [pc, #64]	; (80036f4 <RTC_WeekDayNum+0xe8>)
 80036b4:	fba1 1303 	umull	r1, r3, r1, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	490d      	ldr	r1, [pc, #52]	; (80036f4 <RTC_WeekDayNum+0xe8>)
 80036c0:	fba1 1303 	umull	r1, r3, r1, r3
 80036c4:	09db      	lsrs	r3, r3, #7
 80036c6:	4413      	add	r3, r2
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <RTC_WeekDayNum+0xec>)
 80036cc:	fba3 1302 	umull	r1, r3, r3, r2
 80036d0:	1ad1      	subs	r1, r2, r3
 80036d2:	0849      	lsrs	r1, r1, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	0899      	lsrs	r1, r3, #2
 80036d8:	460b      	mov	r3, r1
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a5b      	subs	r3, r3, r1
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b2db      	uxtb	r3, r3
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	38e38e39 	.word	0x38e38e39
 80036f4:	51eb851f 	.word	0x51eb851f
 80036f8:	24924925 	.word	0x24924925

080036fc <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d024      	beq.n	800375c <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01d      	beq.n	800375c <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f821 	bl	8003776 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0204 	mvn.w	r2, #4
 800373c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2204      	movs	r2, #4
 8003742:	745a      	strb	r2, [r3, #17]
 8003744:	e005      	b.n	8003752 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f80c 	bl	8003764 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0201 	mvn.w	r2, #1
 800375a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e01d      	b.n	80037d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fc48 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fa3a 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e01d      	b.n	800382c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f815 	bl	8003834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f000 fa0f 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
	...

08003848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2201      	movs	r2, #1
 8003858:	6839      	ldr	r1, [r7, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fc7a 	bl	8004154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <HAL_TIM_PWM_Start+0x60>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d107      	bne.n	800387a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d007      	beq.n	800389c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40012c00 	.word	0x40012c00

080038ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fc48 	bl	8004154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIM_PWM_Stop+0x94>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d117      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x52>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f240 4344 	movw	r3, #1092	; 0x444
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_TIM_PWM_Stop+0x52>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	f241 1311 	movw	r3, #4369	; 0x1111
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_TIM_PWM_Stop+0x82>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	f240 4344 	movw	r3, #1092	; 0x444
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <HAL_TIM_PWM_Stop+0x82>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40012c00 	.word	0x40012c00

08003944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800395a:	2302      	movs	r3, #2
 800395c:	e0b4      	b.n	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f200 809f 	bhi.w	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039b1 	.word	0x080039b1
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003a73 	.word	0x08003a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f9ae 	bl	8003d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]
      break;
 80039ee:	e062      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f9f4 	bl	8003de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
      break;
 8003a30:	e041      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fa3d 	bl	8003eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0208 	orr.w	r2, r2, #8
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      break;
 8003a70:	e021      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fa87 	bl	8003f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	61da      	str	r2, [r3, #28]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ab4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0a6      	b.n	8003c36 <HAL_TIM_ConfigClockSource+0x166>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d067      	beq.n	8003bf0 <HAL_TIM_ConfigClockSource+0x120>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d80b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x6c>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d073      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d802      	bhi.n	8003b32 <HAL_TIM_ConfigClockSource+0x62>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06f      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b30:	e078      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d06c      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
 8003b36:	2b30      	cmp	r3, #48	; 0x30
 8003b38:	d06a      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b3a:	e073      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d00d      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x8c>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d804      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x7e>
 8003b44:	2b50      	cmp	r3, #80	; 0x50
 8003b46:	d033      	beq.n	8003bb0 <HAL_TIM_ConfigClockSource+0xe0>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d041      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b4c:	e06a      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d066      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x152>
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d017      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b5a:	e063      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 fad3 	bl	8004116 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
      break;
 8003b88:	e04c      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f000 fabc 	bl	8004116 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bac:	609a      	str	r2, [r3, #8]
      break;
 8003bae:	e039      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f000 fa33 	bl	8004028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2150      	movs	r1, #80	; 0x50
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fa8a 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e029      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f000 fa51 	bl	8004084 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2160      	movs	r1, #96	; 0x60
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fa7a 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003bee:	e019      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f000 fa13 	bl	8004028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa6a 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e009      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fa61 	bl	80040e2 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e000      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <TIM_Base_SetConfig+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0x38>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <TIM_Base_SetConfig+0xcc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x38>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a29      	ldr	r2, [pc, #164]	; (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x38>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <TIM_Base_SetConfig+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x72>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x72>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <TIM_Base_SetConfig+0xcc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x72>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x72>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <TIM_Base_SetConfig+0xc8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00

08003d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 0302 	bic.w	r3, r3, #2
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <TIM_OC1_SetConfig+0xc8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10c      	bne.n	8003d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0308 	bic.w	r3, r3, #8
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <TIM_OC1_SetConfig+0xc8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d111      	bne.n	8003dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0210 	bic.w	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0320 	bic.w	r3, r3, #32
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <TIM_OC2_SetConfig+0xd0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10d      	bne.n	8003e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <TIM_OC2_SetConfig+0xd0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d113      	bne.n	8003e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <TIM_OC3_SetConfig+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10d      	bne.n	8003f32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <TIM_OC3_SetConfig+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d113      	bne.n	8003f62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00

08003f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <TIM_OC4_SetConfig+0x98>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d109      	bne.n	8004000 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00

08004028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 030a 	bic.w	r3, r3, #10
 8004064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 0210 	bic.w	r2, r3, #16
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	031b      	lsls	r3, r3, #12
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f043 0307 	orr.w	r3, r3, #7
 8004104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004130:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	431a      	orrs	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	609a      	str	r2, [r3, #8]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2201      	movs	r2, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e032      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ec:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800423c:	2302      	movs	r3, #2
 800423e:	e03d      	b.n	80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
	...

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	2500      	movs	r5, #0
 80042cc:	4e0c      	ldr	r6, [pc, #48]	; (8004300 <__libc_init_array+0x38>)
 80042ce:	4c0d      	ldr	r4, [pc, #52]	; (8004304 <__libc_init_array+0x3c>)
 80042d0:	1ba4      	subs	r4, r4, r6
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	42a5      	cmp	r5, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	f000 f822 	bl	8004320 <_init>
 80042dc:	2500      	movs	r5, #0
 80042de:	4e0a      	ldr	r6, [pc, #40]	; (8004308 <__libc_init_array+0x40>)
 80042e0:	4c0a      	ldr	r4, [pc, #40]	; (800430c <__libc_init_array+0x44>)
 80042e2:	1ba4      	subs	r4, r4, r6
 80042e4:	10a4      	asrs	r4, r4, #2
 80042e6:	42a5      	cmp	r5, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f0:	4798      	blx	r3
 80042f2:	3501      	adds	r5, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042fa:	4798      	blx	r3
 80042fc:	3501      	adds	r5, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	08004398 	.word	0x08004398
 8004304:	08004398 	.word	0x08004398
 8004308:	08004398 	.word	0x08004398
 800430c:	0800439c 	.word	0x0800439c

08004310 <memset>:
 8004310:	4603      	mov	r3, r0
 8004312:	4402      	add	r2, r0
 8004314:	4293      	cmp	r3, r2
 8004316:	d100      	bne.n	800431a <memset+0xa>
 8004318:	4770      	bx	lr
 800431a:	f803 1b01 	strb.w	r1, [r3], #1
 800431e:	e7f9      	b.n	8004314 <memset+0x4>

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
